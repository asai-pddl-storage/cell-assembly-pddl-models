

* CELL-ASSEMBLY domain

This repository contains a set of data (domain,problems,plans) used in [Asai2014].


+ [Asai2014] Asai, M.; Fukunaga, A: 2014. Fully Automated Cyclic Planning for Large-Scale
  Manufacturing Domains. In /ICAPS 2014/.



** directory =ACP=

It contains 7 directories, each corresponds to one instances of
mass manufacturing problem.
Each directory contains at least the following files:

+ domain.pddl :: a domain file.
+ p1.pddl :: a template problem.
+ p1.plan :: the best template plan obtained by solving it with Fast
             Downward(LAMA2011). Plans were obtained easily and FD has
             searched the entire state space in most cases.
+ p4.pddl, ... p1024.pddl :: mass manufacturing
     problems.
+ [modelname]-SS-[MS3..]-TOTAL-[N].plan.total :: solutions obtained by ACP for each
     N-products manufacturing problems.  *This is a sequential plan before the
     postprocessing* (minimum-slack scheduler) -- our
     scheduler does not have a proper formatter that complies the temporal plan
     input format of VAL-4 (an official PDDL+ plan validator).

Additionally, a directory =ACP/generator= contains
lisp scripts to output those template problems.
However, in order to actually run the script, a bit of work is required,
especially if you are not familier with common lisp development environment.

First of all, you have to obtain a conforming implementation of common lisp (such
as =sbcl=). You also have to install [[http://www.quicklisp.org/][quicklisp]]. After that, place this repo in
/local-systems/ directory, =git submodule init= to obtain the dependent systems
and =(ql:quickload :pddl.builder.cell-assembly)=.

E-Mail me if you need a further guide. Common lisp nicely fits in writing PDDL
files (see how the core part seems exactly like the PDDL files themselves). I think
even non-lispers would be interested.

** directory =temporal=

It contains the temporal versions of the domains and problems in =ACP=
directory. They are made in order to run temporal planners =CPT=,
=yahsp= and =DAE_yahsp= on those domains.
They are manually and minimally changed from the original ones
except /Barman/ (so /Barman/ is not included here).
Barman needs no modification because those planners are
able to interpret a cost-unaware standard STRIPS domain as a temporal
domain with all durations set to 1.

The modification detail mainly consists of:

1. translate =:action-costs= -> =:durative-action=
2. stop using =:negative-preconditions=
3. use =TOTAL-TIME= rather than =TOTAL-COST=

** miscellaneous

Below is an illustration of CELL-ASSEMBLY models.

[[https://raw.github.com/icaps14submission43/pddl-models/master/model-3abc.png]]

